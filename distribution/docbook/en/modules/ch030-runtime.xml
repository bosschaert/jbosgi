<chapter xml:id="ChapRuntime">

  <title>Standalone Runtime</title>
  
  <sect1 xml:id="SecRuntimeOverview">
  
    <title>Overview</title>
    
    <para>The JBoss OSGi Runtime is an OSGi container onto which components, 
    services and applications can be deployed.</para>
    
    <mediaobject>
      <imageobject>
        <imagedata  align="center" fileref="images/jbossosgi-runtime.png"/> 
      </imageobject>
    </mediaobject>
    
    <para><link linkend="SecRuntimeProfiles">Preconfigured profiles</link>, contain OSGi bundles 
    that logically work together. A profile can be bootstrapped either as a standalone server or embedded in some other environment. 
    With a startup time of less than 600ms, the runtime can be easily be bootstrapped from within plain JUnit4 test cases.</para>
    
    <para>The JBoss OSGi Runtime has an integration layer for the underlying OSGi framework.</para>
    
    <para>Through local and remote management capabilities the JBoss OSGi Runtime can be provisioned with new or updated bundles.
    Similar to <ulink url="http://http://jboss.org/jbossas">JBossAS</ulink> it supports hot-deployment by dropping bundles
    into the 'deploy' folder. Management of the runtime is provided through a <link linkend="SecWebConsole">Web Console</link></para>
     
    <para>JBoss OSGi comes with an implementation of 
    <ulink url="http://jbossosgi.blogspot.com/2009/04/osgi-blueprint-service-rfc-124.html">Blueprint Service</ulink>, 
    which standardizes a POJO programming model without much "pollution" of OSGi specific API.</para>
    
    <para>Great care has been taken about testability of deployed components and services. The <link linkend="ChapArquillianTesting">Arquillian Test Framework</link>
    allows you to write plain JUnit tests that do not need to extend any specific test base class.
    Access to the Runtime has been abstracted sufficiently that you can run the same test case against an embedded (bootstrapped from within the test case) 
    as well as a remote instance of the Runtime. You can run your OSGi tests from <ulink url="http://maven.apache.org">Maven</ulink>, 
    <ulink url="http://ant.apache.org">Ant</ulink>, <ulink url="http://www.eclipse.org">Eclipse</ulink> or any other test runner that supports JUnit4.</para>
    
  </sect1>
  
  <sect1 xml:id="SecRuntimeFeatures">
    <title>Features</title>
    
    <para>The current JBoss OSGi Runtime feature set includes</para>
    
    <itemizedlist>
      <listitem><emphasis role="bold">Embedded and Standalone usage</emphasis> -
      The runtime can be bootstrapped as standalone container with a startup time of less than 2 sec 
      in its default configuration or embedded in some other container environment.</listitem>
      
      <listitem><emphasis role="bold">Various Runtime Profiles</emphasis> - 
      It comes with the <link linkend="SecRuntimeProfiles">preconfigured profiles</link> 'Minimal', 'Default', 'Web', 'All'. 
      Setting up a new profile is a mater of creating a new directory and putting some bundles in it.</listitem>
      
      <listitem><emphasis role="bold">Hot Deployement</emphasis> -
      Similar to <ulink url="http://http://jboss.org/jbossas">JBossAS</ulink> there is a deployment scanner that scans
      the 'deploy' folder for new or removed bundles.</listitem>
      
      <listitem><emphasis role="bold">Local and Remote JMX Support</emphasis> - 
      There is local as well as remote JSR160 support for JMX. 
      </listitem>
      
      <listitem><emphasis role="bold">JNDI Support</emphasis> -
      Components can access the JNDI InitialContext as a service from the registry.
      </listitem>
      
      <listitem><emphasis role="bold">JTA Support</emphasis> -
      Components can interact with the JTA TransactionManager and UserTransaction service.
      </listitem>
      
      <listitem><emphasis role="bold">SAX/DOM Parser Support</emphasis> - 
      The Runtime comes with an implementation of an <ulink url="http://www.osgi.org/javadoc/r4v41/org/osgi/util/xml/XMLParserActivator.html">XMLParserActivator</ulink>
      which provides access to a SAXParserFactory and DocumentBuilderFactory.
      </listitem>
      
      <listitem><emphasis role="bold">HttpService and WebApp Support</emphasis> -
      HttpService and WebApp support is provided by <ulink url="http://wiki.ops4j.org/display/paxweb/Pax+Web">Pax Web</ulink>. 
      </listitem>
      
      <listitem><emphasis role="bold">ConfigAdmin Support</emphasis> - 
      ConfigAdmin support is provided by the <ulink url="http://felix.apache.org/site/apache-felix-configuration-admin-service.html">Apache Felix Configuration Admin Service</ulink>. 
      </listitem>
      
      <listitem><emphasis role="bold">EventAdmin Support</emphasis> - 
      EventAdmin support is provided by the <ulink url="http://felix.apache.org/site/apache-felix-event-admin.html">Apache Felix Event Admin Service</ulink>. 
      </listitem>
      
      <listitem><emphasis role="bold">Provisioning</emphasis> -
      Bundle provisioning can be done through the JMX based Runtime Managment Interface. 
      </listitem>
      
      <listitem><emphasis role="bold">Logging System</emphasis> -
      The logging bridge writes OSGi LogEntries to the configured logging framework (e.g. Log4J).
      </listitem>
      
      <listitem><emphasis role="bold">Blueprint Container Support</emphasis> -
      The <ulink url="http://jbossosgi.blogspot.com/2009/04/osgi-blueprint-service-rfc-124.html">Blueprint Container</ulink> service allows bundles 
      to contain standard blueprint descriptors, which can be used for component wiring and injection of blueprint components.
      The idea is to use a plain POJO programming model and let Blueprint do the wiring for you. There should be
      no need for OSGi API to "pollute" your application logic.</listitem>
    </itemizedlist>
  </sect1>
  
  <sect1 xml:id="SecRuntimeProfiles">
    <title>Runtime Profiles</title>
    
    <para>A runtime profile is a collection bundles that logically work together. The OSGi runtime configuration 
    contains the list of bundles that are installed/started automatically. You can start create you own profile 
    by setting up a new directory with your specific set of bundles.</para>
    
    <para>A runtime profile can be started using the <emphasis role="bold">-c comand line option</emphasis>.</para>
    
    <programlisting>
$ bin/run.sh -c minimal
=========================================================================

  JBossOSGi Bootstrap Environment

  OSGI_HOME: /home/tdiesler/jboss-osgi-1.0.0.Beta10/runtime

  JAVA: /usr/java/jdk1.6/bin/java

  JAVA_OPTS: -Dprogram.name=run.sh ...

=========================================================================

14:14:38,355 INFO  JBossOSGi Framework Core - 1.0.0.Alpha8
14:14:38,422 INFO  Bundle STARTED: system.bundle:0.0.0
14:14:38,766 INFO  Bundle STARTED: org.apache.felix.log:1.0.0
14:14:38,816 INFO  Bundle STARTED: jboss-osgi-common:1.0.6
14:14:38,867 INFO  Bundle STARTED: jbosgi-hotdeploy:1.0.8
<emphasis role="bold">14:14:38,870 INFO  JBossOSGi Runtime booted in 0.514sec</emphasis>
    </programlisting>
    
    <emphasis role="bold">Minimal Profile</emphasis>
    
    <para>The 'minimal' profile provides logging and hot-deployment.</para>
    
    <para>The following bundles are installed:</para>
  
    <itemizedlist>
      <listitem><emphasis role="bold">jboss-osgi-common.jar</emphasis> - JBoss OSGi common services</listitem>
      <listitem><emphasis role="bold">jbosgi-hotdeploy.jar</emphasis> - JBoss OSGi hot deployment service</listitem>
      <listitem><emphasis role="bold">org.apache.felix.log.jar</emphasis> - Apache LogService</listitem>
      <listitem><emphasis role="bold">org.osgi.compendium.jar</emphasis> - OSGi compendium API</listitem>
    </itemizedlist>
    
    <emphasis role="bold">Default Profile</emphasis>
    
    <para>The 'default' profile extends the 'minimal' profile by JNDI and JMX</para>
    
    <para>These additional bundles are installed:</para>
  
    <itemizedlist>
      <listitem><emphasis role="bold">jboss-osgi-common-core.jar</emphasis> - JBoss Common Core functionality</listitem>
      <listitem><emphasis role="bold">jboss-osgi-jmx.jar</emphasis> - JBoss OSGi JMX service</listitem>
      <listitem><emphasis role="bold">org.apache.aries.jmx.jar</emphasis> - Apache Aries JMX services</listitem>
      <listitem><emphasis role="bold">org.apache.felix.configadmin.jar</emphasis> - Apache Config Admin service</listitem>
      <listitem><emphasis role="bold">org.apache.felix.eventadmin.jar</emphasis> - Apache Event Admin service</listitem>
    </itemizedlist>
  
    <emphasis role="bold">Web Profile</emphasis>

    <para>The 'web' profile extends the 'default' profile by HttpService and ConfigAdmin</para>
    
    <para>These additional bundles are installed:</para>
  
    <itemizedlist>
      <listitem><emphasis role="bold">jboss-osgi-http.jar</emphasis> - JBoss OSGi HttpService</listitem>
      <listitem><emphasis role="bold">jbosgi-webapp.jar</emphasis> - JBoss OSGi WebApp Support</listitem>
      <listitem><emphasis role="bold">jbosgi-webconsole.jar</emphasis> - JBoss OSGi Web Console</listitem>
    </itemizedlist>

    <emphasis role="bold">All Profile</emphasis>
    
    <para>The 'all' profile extends the 'web' profile by SAX/DOM, JTA, Blueprint</para>
    
    <para>These additional bundles are installed:</para>
  
    <itemizedlist>
      <listitem><emphasis role="bold">arquillian-osgi-bundle.jar</emphasis> - Arquillian test support</listitem>
      <listitem><emphasis role="bold">jboss-osgi-xerces.jar</emphasis> - Apache Xerces support</listitem>
      <listitem><emphasis role="bold">jbosgi-blueprint.jar</emphasis> - Blueprint Container support</listitem>
    </itemizedlist>
  </sect1>

</chapter>
  
