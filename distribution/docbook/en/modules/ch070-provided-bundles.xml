<chapter xml:id="ChapProvidedBundles">

  <title>Provided Bundles and Services</title>
  
  <sect1 xml:id="SecBundleBlueprint">  
    <title>Blueprint Container Service</title>
    
    <para>The JBoss OSGi <emphasis role="bold">jbosgi-blueprint.jar</emphasis> bundle provides 
    together with <emphasis role="bold">org.apache.aries.blueprint.jar</emphasis> access to the Blueprint extender service.</para> 
    
    <para>The <ulink url="http://jbossosgi.blogspot.com/2009/04/osgi-blueprint-service-rfc-124.html">Blueprint Container</ulink> 
    service allows bundles to contain standard blueprint descriptors, which can be used for component wiring 
    and injection of blueprint components. The idea is to use a plain POJO programming model and let 
    Blueprint do the wiring for you. There should be no need for OSGi API to "pollute" your application logic.</para>
    
    <para>The Blueprint API is divided into the <emphasis role="bold">Blueprint Container</emphasis> and 
    <emphasis role="bold">Blueprint Reflection</emphasis> packages.</para> 
    
    <itemizedlist>
      <listitem><emphasis role="bold"><ulink url="http://www.osgi.org/javadoc/r4v42/org/osgi/service/blueprint/container/package-summary.html">org.osgi.service.blueprint.container</ulink></emphasis></listitem>
      <listitem><emphasis role="bold"><ulink url="http://www.osgi.org/javadoc/r4v42/org/osgi/service/blueprint/reflect/package-summary.html">org.osgi.service.blueprint.reflect</ulink></emphasis></listitem>
    </itemizedlist>
    
  </sect1>
  
  <sect1 xml:id="SecHttpService">  
    <title>HttpService</title>
    
    <para>The <emphasis role="bold">pax-web-jetty-bundle.jar</emphasis> bundle from the OPS4J 
    <ulink url="http://wiki.ops4j.org/display/paxweb/Pax+Web">Pax Web</ulink> project provides access to the 
    <ulink url="http://www.osgi.org/javadoc/r4v42/org/osgi/service/http/package-frame.html">HttpService</ulink>.</para> 
    
    <para>An example of how a bundle uses the HttpService to register servlet and resources is given in 
    <link linkend="SecHTTPServiceExample">HttpService Example</link>.</para>
    
    <para>The HttpService is configured with these properties.</para>
    
    <table>
      <tr><th>Key</th><th>Value</th><th>Description</th></tr>
      <tr valign="top">
        <td>org.osgi.service.http.port</td>
        <td>8090</td>
        <td>The property that sets the port the HttpService binds to</td>
      </tr>
    </table>
    
    <para>The service is registered with the Framework under the name</para>
    
    <itemizedlist>
      <listitem><emphasis role="bold"><ulink url="http://www.osgi.org/javadoc/r4v42/org/osgi/service/http/HttpService.html">org.osgi.service.http.HttpService</ulink></emphasis></listitem>
    </itemizedlist>
    
  </sect1>
  
  <sect1 xml:id="SecBundleJMX">  
    <title>JMX Service</title>
    
    <para>The JBoss OSGi <emphasis role="bold">jboss-osgi-jmx.jar</emphasis> bundle activator discovers and registers the 
    <ulink url="http://java.sun.com/javase/6/docs/api/javax/management/MBeanServer.html">MBeanServer</ulink> with the framework.
    By default, it also sets up a remote connector at:</para>

    <para><emphasis role="bold">service:jmx:rmi://localhost:1198/jndi/rmi://localhost:1090/osgi-jmx-connector</emphasis></para>
    
    <para>The JMX Service is configured with these properties.</para>
    
    <table>
      <tr><th>Key</th><th>Value</th><th>Description</th></tr>
      <tr valign="top">
        <td>org.jboss.osgi.jmx.host</td>
        <td>localhost</td>
        <td>The property that sets the host that the JMXConnector binds to</td>
      </tr>
      <tr valign="top">
        <td>org.jboss.osgi.jmx.rmi.port</td>
        <td>1198</td>
        <td>The property that sets the port that the JMXConnector binds to</td>
      </tr>
      <tr valign="top">
        <td>org.jboss.osgi.jmx.rmi.registry.port</td>
        <td>1090</td>
        <td>The property that sets the port that the RMI Registry binds to</td>
      </tr>
    </table>
    
    <para>Here is the complete list of services that this bundle provides</para>
    
    <itemizedlist>
      <listitem><emphasis role="bold"><ulink url="http://java.sun.com/javase/6/docs/api/javax/management/MBeanServer.html">javax.management.MBeanServer</ulink></emphasis></listitem>
      <listitem><emphasis role="bold"><ulink url="../../apidocs/org/jboss/osgi/jmx/FrameworkMBeanExt.html">org.jboss.osgi.jmx.FrameworkMBeanExt</ulink></emphasis></listitem>
      <listitem><emphasis role="bold"><ulink url="../../apidocs/org/jboss/osgi/jmx/BundleStateMBeanExt.html">org.jboss.osgi.jmx.BundleStateMBeanExt</ulink></emphasis></listitem>
      <listitem><emphasis role="bold"><ulink url="../../apidocs/org/jboss/osgi/jmx/PackageStateMBeanExt.html">org.jboss.osgi.jmx.PackageStateMBeanExt</ulink></emphasis></listitem>
      <listitem><emphasis role="bold"><ulink url="../../apidocs/org/jboss/osgi/jmx/ServiceStateMBeanExt.html">org.jboss.osgi.jmx.ServiceStateMBeanExt</ulink></emphasis></listitem>
    </itemizedlist>
    
  </sect1>
  
  <sect1 xml:id="SecBundleXerces">  
    <title>XML Parser Services</title>
    
    <para>The JBoss OSGi <emphasis role="bold">jboss-osgi-apache-xerces.jar</emphasis> bundle provides services 
    for DOM and SAX parsing.</para>

    <para>The services are registered with the Framework under the name</para>
    
    <itemizedlist>
      <listitem><emphasis role="bold"><ulink url="http://java.sun.com/javase/6/docs/api/javax/xml/parsers/SAXParserFactory.html">javax.xml.parsers.SAXParserFactory</ulink></emphasis></listitem>
      <listitem><emphasis role="bold"><ulink url="http://java.sun.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">javax.xml.parsers.DocumentBuilderFactory</ulink></emphasis></listitem>
    </itemizedlist>
    
    <para>Please see <ulink url="http://www.osgi.org/javadoc/r4v41/org/osgi/util/xml/XMLParserActivator.html">XMLParserActivator</ulink>
    for details.</para>
    
  </sect1>
  
</chapter>
